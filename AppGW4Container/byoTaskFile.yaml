version: '3'
# based on https://learn.microsoft.com/en-us/azure/application-gateway/tutorial-ingress-controller-add-on-existing

env:
  RG: agw4c-rg
  LOCATION: francecentral
  IDENTITY_RESOURCE_NAME: azure-alb-identity
  AGFC_NAME: agw4c-alb
dotenv: ['.env']

tasks:
  azure_auth:
    desc: "Authenticate to Azure using Azure CLI"
    cmds:
      - az login
    silent: false

  byo_create_application_gateway4c:
    desc: "Create Application Gateway"
    vars:
      FRONTEND_NAME: frontend
    cmds:
      - az network alb create -g {{.RG}} -n {{.AGFC_NAME}}
      - az network alb show -g {{.RG}} -n {{.AGFC_NAME}}
      - az network alb frontend create -g {{.RG}} -n {{.FRONTEND_NAME}} --alb-name {{.AGFC_NAME}}
      - task: _byo_subnet_to_association_resource
      - task: _byo_peer_vnets
  
  _byo_subnet_to_association_resource:
    desc: "Create subnet and associate it with trafficControllers delegation"
    vars:
      ALB_SUBNET_NAME: subnet-alb
      VNET_NAME: vnet-alb
      ASSOCIATION_NAME: association-test
      principalId:
        sh: az identity show -g {{.RG}} -n {{.IDENTITY_RESOURCE_NAME}} --query principalId -otsv
    cmds:
      - az network vnet create         --name {{.VNET_NAME}} --resource-group {{.RG}}  --address-prefix 10.0.0.0/16 --subnet-name {{.ALB_SUBNET_NAME}} --subnet-prefix 10.0.0.0/24 
      - az network vnet subnet update  --name {{.ALB_SUBNET_NAME}} --resource-group {{.RG}} --vnet-name {{.VNET_NAME}}  --delegations 'Microsoft.ServiceNetworking/trafficControllers'
      - az network vnet subnet list    --resource-group {{.RG}} --vnet-name {{.VNET_NAME}}  --query "[?name=='{{.ALB_SUBNET_NAME}}'].id" --output tsv
      #  Delegate AppGw for Containers Configuration Manager role to RG containing Application Gateway for Containers resource
      - az role assignment create --assignee-object-id {{.principalId}} --assignee-principal-type ServicePrincipal --scope $(az group show --name {{.RG}} --query id -otsv) --role "fbc52c3f-28ad-4303-a892-8a056630b8f1" 
      # Delegate Network Contributor permission for join to association subnet
      - az role assignment create --assignee-object-id {{.principalId}} --assignee-principal-type ServicePrincipal --scope $(az network vnet subnet list  --resource-group {{.RG}} --vnet-name {{.VNET_NAME}}  --query "[?name=='{{.ALB_SUBNET_NAME}}'].id" --output tsv) --role "4d97b98b-1d4f-4787-a291-c67834d212e7" 
      - echo "create the association resource and connect it to the referenced subnet. It can take 5-6 minutes for the Application Gateway for Containers association to be created."
      - az network alb association create -g {{.RG}} -n {{.ASSOCIATION_NAME}} --alb-name {{.AGFC_NAME}} --subnet $(az network vnet subnet list  --resource-group {{.RG}} --vnet-name {{.VNET_NAME}}  --query "[?name=='{{.ALB_SUBNET_NAME}}'].id" --output tsv)

  _byo_peer_vnets:
    desc: peer the AKS VNET with the Application Gateway VNET
    vars:
      nodeResourceGroup:
        sh: az aks show --resource-group {{.RG}} --name agw4c-aks --query nodeResourceGroup --output tsv 
      aksVnetName:
        sh: az network vnet list --resource-group {{.nodeResourceGroup}} -o tsv --query "[0].name"
      aksVnetId:
        sh: az network vnet show --resource-group {{.nodeResourceGroup}} --name {{.aksVnetName}} --query id --output tsv
      appGWVnetId:
        sh: az network vnet show --name vnet-alb --resource-group {{.RG}} -o tsv --query "id"
    cmds:
      - az network vnet peering create --name AppGWtoAKSVnetPeering --resource-group {{.RG}} --vnet-name vnet-alb --remote-vnet {{.aksVnetId}} --allow-vnet-access
      - az network vnet peering create --name AKStoAppGWVnetPeering --resource-group {{.nodeResourceGroup}} --vnet-name {{.aksVnetName}} --remote-vnet {{.appGWVnetId}} --allow-vnet-access

 
  aks_get_credentials:
    desc: "Get credentials for AKS cluster"
    cmds:
      - az aks get-credentials --resource-group $RG --name agw4c-aks
      - kubectl get nodes
    silent: false
  
  deploy_application:
    desc: deploy a sample application
    depends: [aks_get_credentials]
    cmds:
      - kubectl apply -f ./aspnetapp.yaml
      - kubectl get ingress aspnetapp
      - kubectl get service aspnetapp

  clean_up:
    desc: "Clean up"
    cmds:
      - az group delete --name $RG --yes
    silent: false