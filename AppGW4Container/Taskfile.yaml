version: '3'
# based on https://learn.microsoft.com/en-us/azure/application-gateway/tutorial-ingress-controller-add-on-existing

env:
  RG: agw4c-rg
  LOCATION: francecentral
  IDENTITY_RESOURCE_NAME: azure-alb-identity
dotenv: ['.env']

tasks:
  azure_auth:
    desc: "Authenticate to Azure using Azure CLI"
    cmds:
      - az login
    silent: false

  azure_config:
    desc: "Configure Azure CLI"
    cmds:
      - az provider register --namespace Microsoft.ContainerService
      - az provider register --namespace Microsoft.Network
      - az provider register --namespace Microsoft.NetworkFunction
      - az provider register --namespace Microsoft.ServiceNetworking
      - az extension add --name alb
  
  create_resource_group:
    desc: "Create a resource group ${RG} in $LOCATION"
    cmds:
      - az group create --name $RG --location $LOCATION
    silent: false
  
  new_aks_cluster:
    desc: create a new AKS cluster
    deps: [create_resource_group, azure_config]
    cmds:
      - az aks create --resource-group $RG --name agw4c-aks --node-count 1 --network-plugin azure --enable-oidc-issuer --enable-workload-identity --enable-managed-identity --generate-ssh-keys --tier Free --node-vm-size Standard_D4ds_v4
    silent: false

  azure_alb_identity:
    desc: "Install Azure Load Balancer Controller in the AKS cluster"
    cmds:
      - task: _create_azure_alb_identity
      - task: _assign_reader_roler_to_alb_identity
      - task: _set_up_federation_with_aks_oidc_issuer
      - echo "Azure Load Balancer Identity created and configured"

  deploy_alb_controller:
    desc: "Deploy Azure Load Balancer Controller"
    deps: [aks_get_credentials]
    vars:
      CONTROLLER_NAMESPACE: "azure-alb-system-controller"
      HELM_NAMESPACE: "azure-alb-system-helm"
    cmds:
      - helm install alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller --namespace {{.HELM_NAMESPACE}} --version 1.3.7 --set albController.namespace={{.CONTROLLER_NAMESPACE}} --set albController.podIdentity.clientID=$(az identity show -g {{.RG}} -n azure-alb-identity --query clientId -o tsv) --create-namespace 
    silent: false
    
  verify_alb_controller:
    desc: "Verify Azure Load Balancer Controller"
    deps: [aks_get_credentials]
    cmds:
      - kubectl get pods -n azure-alb-system-controller
      - kubectl get gatewayclass azure-alb-external -o yaml
    silent: false

  _create_azure_alb_identity:
    desc: "Create Azure Load Balancer Identity"
    cmds:
      - az identity create --resource-group {{.RG}} --name {{.IDENTITY_RESOURCE_NAME}}
      - az identity show --resource-group {{.RG}} --name {{.IDENTITY_RESOURCE_NAME}}
      - echo "Waiting 60 seconds to allow for replication of the identity..."
      - sleep 60

  _assign_reader_roler_to_alb_identity:
    desc: "Assign Reader role to Azure Load Balancer Identity"
    vars:
      READER_ROLE_ID: "acdd72a7-3385-48ef-bd42-f606fba81ae7"
    cmds:
      - az role assignment create --role {{.READER_ROLE_ID}} --assignee $(az identity show --resource-group {{.RG}} --name {{.IDENTITY_RESOURCE_NAME}} --query principalId -otsv) --scope $(az group show --name {{.RG}} --query id -otsv)

  _set_up_federation_with_aks_oidc_issuer:
    desc: "Set up federation with AKS OIDC issuer"
    cmds:
      - az identity federated-credential create --name "azure-alb-identity" --identity-name {{.IDENTITY_RESOURCE_NAME}} --resource-group {{.RG}} --issuer $(az aks show --resource-group {{.RG}}  --name agw4c-aks --query "oidcIssuerProfile.issuerUrl" -o tsv)  --subject "system:serviceaccount:azure-alb-system:alb-controller-sa"

  list_clusters:
    desc: "List AKS clusters"
    cmds:
      - az aks list --resource-group $RG --output table
    silent: false
  aks_get_credentials:
    desc: "Get credentials for AKS cluster"
    cmds:
      - az aks get-credentials --resource-group $RG --name agw4c-aks
      - kubectl get nodes
    silent: false
  
  deploy_application:
    desc: deploy a sample application
    depends: [aks_get_credentials]
    cmds:
      - kubectl apply -f ./aspnetapp.yaml
      - kubectl get ingress aspnetapp
      - kubectl get service aspnetapp

  clean_up:
    desc: "Clean up"
    cmds:
      - az group delete --name $RG --yes
    silent: false